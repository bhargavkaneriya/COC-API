'use strict';
/*
 *---------------------------------------------------------------
 * Cloudinary Handler
 *---------------------------------------------------------------
 *
 * This handler is used for uploading images using Cloudinary.
 * 
 *     imageUpload - Image upload in cloudinary
 *     imageDelete - Delete image
 *     folderDelete - Delete Folder
 *
 */

const asyncLoop = require('async');

const cloudinary = require('cloudinary').v2;
// Image uplaod & delete in Cloudinary

/**
* Method used to update keys
*
* @param {Object} requestParam - An object with keys cloud_name, api_key, api_secret
*/
const config = (requestParam)=> {
    cloudinary.config({
        cloud_name: requestParam.cloud_name,
        api_key: requestParam.api_key,
        api_secret: requestParam.api_secret
    });
};


/*
 * Image upload in cloudinary storage
 * @created date : 28th Jan 2022.
 * @param {string} path - file path.
 * @param {string} bucket - folder name where image store.
 * @param {string} file_name - image file name.
*/
const imageUpload = (requestParam)=> {
    return new Promise((resolve, reject) => {
        requestParam.bucket = `${requestParam.bucket}/${requestParam.file_name}`
        cloudinary.uploader.upload(requestParam.path, {
            public_id: requestParam.bucket
        })
        .then((image) => {
            resolve(image.url);
            return
        })
        .catch((err) => {
            if (err) {
                reject(err);
                return;
            }
        });
    })
};

/*
 * Delete image from s3 bucket
 * @created date : 28th Jan 2022.
 * @param {object} objects - file object.
 * @param {string} bucket - s3 bucket name where image store.
*/
const imageDelete = (requestParam)=> {
    return new Promise((resolve) => {
        asyncLoop.forEachSeries(requestParam.objects,(singleRec, Callback_s1) => {
            const normalImageUploadURL = singleRec.lastIndexOf("/");
            let removableImage = singleRec.substring(normalImageUploadURL + 1);
            if (removableImage) {
                removableImage = removableImage.split('.').slice(0, -1).join('.');
                cloudinary.uploader.destroy(requestParam.bucket + removableImage, ()=> {
                    Callback_s1();
                });
            } else {
                Callback_s1();
            }
        },() => {
            resolve({});
            return
        });
    })
};

/*
 * Delete folder from s3 bucket
 * @created date : 28th Jan 2022.
 * @param {Array} ids - images ids.
 * @param {string} bucket - s3 bucket name where image store.
*/
const folderDelete = (requestParam)=> {
    return new Promise((resolve) => {
        asyncLoop.forEachSeries(requestParam.ids, (singleRec, Callback_s1)=> {
            cloudinary.api.delete_resources_by_prefix(requestParam.bucket+singleRec, ()=>{
                cloudinary.api.delete_folder(requestParam.bucket+singleRec, ()=>{
                    Callback_s1();
                });
            });
        },() => {
            resolve({});
            return
        });
    })
};

module.exports = {
    config,
    imageUpload,
    imageDelete,
    folderDelete
};